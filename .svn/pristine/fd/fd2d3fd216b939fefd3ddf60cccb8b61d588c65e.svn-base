// ============================================================ 公共模块指令  ============================================================
define(['angularAMD'],function(angularAMD){
	'use strict';
	// ================================================== 标题模块指令
	angularAMD.directive('headerPublic',function(){
		return{
			restrict : 'E',
			replace : true,
			template : '<header class="header"><a href="javascript:window.history.go(-1);"><s class="tr-l"><i></i><b></b></s></a>\
							<h1 ng-bind="title | fTitle">e办公移动平台</h1>\
						</header>',
			link : function(scope,elem,attr){
				
			}
		}
	})
	angularAMD.filter('fTitle',function(){
		return function(name){
			if(name)
				return name.replace(title,'');
		}
	})
	// ================================================== 搜索模块指令
	angularAMD.directive('headerSearch',function(){
		return{
			restrict : 'E',
			replace : true,
			template : '<header class="header"><div class="search-box"><input id="search" type="text" placeholder="您想购买什么呢？" ng-model="search"><i></i></div></header>',
			link : function(scope,elem,attr){
				
			}
		}
	})
	// ================================================== 导航模块指令
	angularAMD.directive('publicNav',function($sessionStorage){
		return {
			restrict : 'E',
			replace : true,
			scope :{},
			template : '<nav class="home-nav">\
							<a href="index.html" ng-class="{current:cpage === P.index}"><i class="ico-n-1"></i><span>首页</span></a>\
							<a href="procurement.html" ng-class="{current:cpage === P.procurement}"><i class="ico-n-2"></i><span>集采</span></a>\
							<a href="store.html#/floor" ng-class="{current:cpage === P.floor}"><i class="ico-n-3"></i><span>逛一逛</span></a>\
							<a href="index.html#/cart" ng-class="{current:cpage === P.cart}"><i class="ico-n-4"></i><span>购物车</span></a>\
							<a href="center.html" ng-class="{current:cpage === P.center}"><i class="ico-n-5"></i><span>我的</span></a>\
						</nav>',
			link : function(scope){
				scope.cpage = $sessionStorage.currentPage;
				scope.P = {
					index : 'index',
					procurement : 'procurement',
					floor : 'floor',
					cart : 'cart',
					center : 'center'
				};
			}
		}
	})
	// ================================================== 公共小模块
	angularAMD.directive('promt',function($timeout,$rootScope){
		return {
			restrict : 'E',
			replace : true,
			template : '<box>\
							<p class="promt" ng-if="!isLogin" ng-class="{current:promtFlag}"><span ng-bind="promtText"></span></p>\
							<div class="loading-wrap" ng-if="loading"><p><i></i><span ng-bing="loadingTxt"></span></p></div>\
						</box>',
			link : function(scope,elem,attr){
				$rootScope.loading = false;

				$rootScope.promt = function(txt){
					scope.promtText = txt;
					scope.promtFlag = true;
					$timeout(function(){
						scope.promtFlag = false;
					},1500);
				}
			}
		}
	})
	// ================================================== 暂无数据
	angularAMD.directive('noData',function(){
		return {
			restrict : 'E',
			replace : true,
			template : '<div ng-if="data.length===0 || noData || dataLength === 0" class="no-data animated" ng-class="{flip:true}">暂无数据</div>',
			link : function(scope,elem,attr){
				
			}
		}
	})
	// ================================================== 确认弹窗
	angularAMD.directive('confirm',function(){
		return {
			restrict : 'E',
			replace : true,
			template : '<section class="pop-wrap yes-no-wrap animated fadeIn" ng-if="pop">\
							<div>\
								<h6 ng-bind="yesText"></h6>\
								<nav class="wrap-nav">\
									<a class="btn-1-2" href="javascript:;" ng-click="yes()">确认</a>\
									<a class="btn-1" href="javascript:;" ng-click="no()">取消</a>\
								</nav>\
							</div>\
						</section>',
			link : function(scope,elem,attr){
				scope.pop = false;
				scope.no = function(){
					scope.pop = false;
				}
			}
		}
	})

	// ================================================== 验证表单指令
	angularAMD.directive('validator',function($rootScope){
		var card = function(code){
			if (!(/^[0-9]{16,19}$/.test(code)))
				return false;
		
			var g = code.length , n = 0 , _code = code.substr(0 , g-1) , x = code.substr(g-1 , 1) , u = 0;
			
			if (g % 2 == 0){
				for (var i = 0 ; i < g-1 ; i++){
					u = parseInt(_code[i] , 10);
					n += (i % 2 == 0) ? ((u / 5 >= 1) ? (1 + u * 2 % 10) : (u * 2)) : u;
				}
			}else{
				for (var i = 0 ; i < g-1 ; i++){
					u = parseInt(_code[i] , 10);
					n += (i % 2 != 0) ? ((u / 5 >= 1) ? (1 + u * 2 % 10) : (u * 2)) : u;
				}
			}
			n += parseInt(x,10);
		
			return n % 10 == 0;
		}
		$rootScope.$on('validator',function(e,reg,ngModel,param){
			if (ngModel && reg) {
				var regexp = reg;
			}
			var validator = function(value){
				if(reg === null){
					var validity = !ngModel.$isEmpty(value);	//　非空验证
				}else if(reg === 'card'){
				
						console.log(value)
					var validity = !ngModel.$isEmpty(value) && card(value);	//　非空验证 + 信用卡验证
				}else{
					var validity = !ngModel.$isEmpty(value) && regexp.test(value);	// 非空验证　+　一个正则验证
				}
				ngModel.$setValidity("validator", validity);
				return validity ? value : undefined;
			}
			
			ngModel.$formatters.push(validator);
			ngModel.$parsers.push(validator);
		});
		
		return {
			restrict : 'A',
			require : 'ngModel',
			link : function(scope,elem,attr,ngModel){
				var isValid = attr.validator;
				// /^[0-9]{6}$/
				switch(isValid){
					// 验证电话号码
					case 'phone':
						scope.$emit('validator',/^(13\d|18\d|14[57]|15[012356789]|17[0678])\d{8}$/,ngModel);
						break;
					// 验证手机图片验证码
					case 'vifery':
						scope.$emit('validator',/^[0-9]{6}$/,ngModel);
						break;
					// 密码验证
					case 'pwd':
						scope.$emit('validator',/^[a-zA-Z]\w{5,17}$/,ngModel);	
						break;
					// 验证密码一致性
					case 'rpwd' :
						var pwCheck = function(){
							ngModel.$setValidity('pwmatch',scope.apassword === scope.bpassword);	// 改变验证状态，以及在控制变化的验证标准时通知表格
						}
						scope.$watch('apassword',pwCheck)
						scope.$watch('bpassword',pwCheck)
						scope.$emit('validator',null,ngModel);
						break;
					// 验证银行卡
					case 'card':
						scope.$emit('validator','card',ngModel);
						break;
					// 非空验证
					default:
						scope.$emit('validator',null,ngModel);
						break;
				}
			}
		}
	});
	// ================================================== repeat 完成操作 dom
	angularAMD.directive('repeatFinish',function(){
		return function(scope,elem,attr){
			if(scope.$last){
				//console.log('ngRpeat 完毕');
				scope.$eval(attr.repeatFinish);
				//scope.$emit('finish');
			}
		}
	})
})