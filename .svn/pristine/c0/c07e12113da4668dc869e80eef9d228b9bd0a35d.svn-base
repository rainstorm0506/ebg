<?php
/**
 * 第三方账号
 * 
 * @author root
 */
class Passport extends WebModels
{
	private $source = array('wb'=>5 , 'wx'=>6 , 'qq'=>7);
	/**
	 * 根据CODE获取微博用户基本信息
	 * 
	 * @param  string		$code		
	 */
	public function getWeiboInfo($code)
	{
		$third = ClassLoad::Only('ThirdLoginWB');/* @var $third ThirdLoginWB */
		$token = $third->getAccessTokenToCode($code);
		
		if (isset($token['access_token']) && ($info = $this->getWeiboInfoByToken($token['access_token'])))
		{
			$info['access_token'] = $token['access_token'];
			return (array)$info;
		}
		return array();
	}
	
	/**
	 * 通过access_token获取用户信息
	 * 
	 * @param  string  $access_token
	 * @return mixed
	 */
	public function getWeiboInfoByToken($access_token)
	{
		$third = ClassLoad::Only('ThirdLoginWB');/* @var $third ThirdLoginWB */
		if (($api = $third->apiObj($access_token)) && ($uid = $api->get_uid()) && isset($uid['uid']))
			return $api->show_user_by_id($uid['uid']);
		
		return false;
	}
	
	/**
	 * QQ授权后获取用户基本数据
	 * 
	 * @param  string $code
	 * @return array
	 */
	public function getQQInfo($code)
	{
		Yii::import('system.extensions.ebg.ThirdLoginQQ' , true);
		
		$third			= new TencentQC();/* @var $third TencentQC */
		$access_token	= $third->qq_callback();
		$openid			= $third->get_openid();
		unset($third);
		
		$third = new TencentQC($access_token , $openid);/* @var $third TencentQC */
		
		if ($user = $third->get_user_info())
		{
			$user['access_token'] 	= $access_token;
			$user['openid']			= $openid;
			return $user;
		}
		return array();
	}
	
	/**
	 * 获取微信用户基本信息
	 * 
	 * @param  string $code
	 * @return mixed
	 */
	public function getWechatInfo($code)
	{
		$third = ClassLoad::Only('ThirdLoginWechat');/* @var $third ThirdLoginWechat */
		$token = $third->getAccessToken($code);
		
		if ($token && isset($token['access_token']) && isset($token['openid']))
			return (array)$this->getWechatInfoByToken($token['access_token'] , $token['openid']);
		
		return array();
	}
	
	/**
	 * 根据accessToken和openid获取微信用户数据
	 * 
	 * @param array 	$token
	 * @return mixed
	 */
	public function getWechatInfoByToken($token, $openid)
	{
		$third = ClassLoad::Only('ThirdLoginWechat');/* @var $third ThirdLoginWechat */
		return $third->getUser($token , $openid);
	}
	
	/**
	 * 获得绑定过的账号信息
	 * 
	 * @param		PassportForm		$form		第三方数据
	 * @param		string				$openid		openid
	 */
	public function getBindUser(PassportForm $form , $openid)
	{
		$SQL = $form->seat == 2 ? 'u.user_type=3' : 'u.user_type!=3';
		switch ($form->source)
		{
			case 'wb'	: $SQL .= ' AND up.weibo_id=:openid';break;
			case 'wx'	: $SQL .= ' AND up.wechat_id=:openid';break;
			case 'qq'	: $SQL .= ' AND up.qq_id=:openid';break;
			default		: return array();
		}
		
		return $this->queryRow(
			"SELECT u.id , u.user_type , u.phone , u.status_id FROM user_passport AS up INNER JOIN user AS u ON u.id=up.user_id WHERE {$SQL}" ,
			true ,
			array(':openid' => $openid)
		);
	}
	
	/**
	 * 获得用户数据
	 * 
	 * @param		bigint		$phone				手机号码
	 * @param		bool		$isMerchant			是否是商家
	 */
	public function getUserInfo($phone , $isMerchant)
	{
		$model = ClassLoad::Only('Home');/* @var $model Home */
		return $model->getUserInfo($phone , $isMerchant);
	}
	
	public function signMember(array $third , PassportForm $form)
	{
		if ($this->isRepeat($form->phone , $form->source , $form->seat , $form->openid))
			return null;
		
		$transaction = Yii::app()->getDb()->beginTransaction();
		try
		{
			$time = time();
			$this->insert('user' , array(
				'source'		=> isset($this->source[$third['source']]) ? (int)$this->source[$third['source']] : 0,
				'user_type'		=> 1,
				'phone'			=> $form->phone,
				'user_code'		=> $form->phone,
				're_code'		=> $form->recode,
				're_uid'		=> GlobalUser::getReUid($form->recode),
				'reg_time'		=> $time,
				'last_time'		=> $time,
				'status_id'		=> 510,
				'nickname'		=> $third['nickname'],
				'face'			=> $this->getOnlinePic($third['face'] , 'user' , null , 'png'),
			));
			
			$this->regUserPassport($this->getInsertId() , $form , $third['third_info']);
			
			$transaction->commit();
			return true;
		}catch(Exception $e){
			$transaction->rollBack();
		}
		return false;
	}
	
	public function regUserPassport($uid , PassportForm $form , array $thirdInfo)
	{
		$passport = array('user_id' => $uid);
		switch ($form->source)
		{
			case 'wb' :
				$passport['weibo_id']			= $form->openid;
				$passport['weibo_info']			= json_encode($thirdInfo);
				break;
		
			case 'qq' :
				$passport['qq_id']				= $form->openid;
				$passport['qq_info']			= json_encode($thirdInfo);
				break;
		
			case 'wx':
				$passport['wechat_id']			= $form->openid;
				$passport['wechat_unionid']		= isset($thirdInfo['unionid']) ? $thirdInfo['unionid'] : '';
				$passport['wechat_info']		= json_encode($thirdInfo);
				break;
		}
		return $this->insert('user_passport' , $passport);
	}
	
	/**
	 * 绑定已注册用户
	 * 
	 * @param		int					$uid			用户ID
	 * @param		array				$session		session
	 * @param		PassportForm		$form			form
	 */
	public function bindExtUser($uid , array $session , PassportForm $form)
	{
		$columns = array();
		switch ($form->source)
		{
			case 'wb' :
				$columns['weibo_id']			= $form->openid;
				$columns['weibo_info']			= json_encode($session['third_info']);
			break;
		
			case 'qq' :
				$columns['qq_id']				= $form->openid;
				$columns['qq_info']				= json_encode($session['third_info']);
			break;
		
			case 'wx' :
				$columns['wechat_id']			= $form->openid;
				$columns['wechat_unionid']		= isset($session['third_info']['unionid']) ? $session['third_info']['unionid'] : '';
				$columns['wechat_info']			= json_encode($session['third_info']);
			break;
			default : return null;
		}
		
		if (!$this->update('user_passport' , $columns , 'user_id=:uid' , array(':uid'=>$uid)))
			$this->regUserPassport($uid , $form, $session['third_info']);
		
		return true;
	}
	
	/**
	 * 是否重复绑定了同一平台
	 * 
	 * @param		stirng		$phone		手机号
	 * @param		string		$source		第三方平台标识（wb=微博 , wx=微信 , qq=QQ）
	 * @param		int			$seat		类型 , 1= 个人/企业 , 2=商家
	 * @param		string		$openid		openid
	 * 
	 * @return		bool
	 */
	public function isRepeat($phone , $source , $seat , $openid , &$tsx = '')
	{
		$SQL = $seat == 2 ? 'u.user_type=3' : 'u.user_type!=3';
		switch ($source)
		{
			case 'wb'	: $SQL .= ' AND up.weibo_id=:openid'; $tsx = '微博';		break;
			case 'wx'	: $SQL .= ' AND up.wechat_id=:openid'; $tsx = '微信';	break;
			case 'qq'	: $SQL .= ' AND up.qq_id=:openid'; $tsx = 'QQ';			break;
			default		: return false;
		}
		
		return (bool)$this->queryScalar(
			"SELECT up.user_id FROM user_passport AS up INNER JOIN user AS u ON u.id=up.user_id AND u.phone=:phone WHERE {$SQL}",
			array(':phone' => $phone , ':openid' => $openid)
		);
	}
	
}
