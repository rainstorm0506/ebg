<?php

/**
 * 商品订单 模型类
 * @author jeson.Q 
 * 
 * @table content
 */
class Order extends SModels {
	
	/**
	 * 获得 商品订单信息
	 * return array|boolean
	 * @param int $id 
	 */
	public function getActiveInfo($order_sn,$isOrderList = 0) {
		$orderInfo = array ();
		if ($order_sn) {
			$sql = "SELECT o.*, opl.pay_port, opl.pay_time, opl.pay_money, s.pre_status, s.merchant_describe, s.user_title,s.user_title, s.back_title, s.merchant_title, oe.user_shoot, oe.addressee_shoot, oe.express_name, oe.system_remark, oe.user_remark, oe.delivery_way, ex.id as ex_id, ex.firm_name, um.uid, um.store_name, um.store_address FROM orders o 
				lEFT JOIN order_pay_log opl ON o.order_sn = opl.order_sn
				lEFT JOIN orders_extend oe ON o.order_sn = oe.order_sn
				lEFT JOIN express ex ON oe.express_id = ex.id
				lEFT JOIN status s ON o.order_status_id = s.id
				lEFT JOIN user_merchant um ON o.merchant_id = um.uid
				WHERE o.order_sn = '{$order_sn}' ";
			$orderInfo = $this->queryRow($sql);
			if(!$isOrderList){
				$orderInfo['goods'] = $this->getGoodsList($orderInfo['order_sn']);
				$orderInfo['logs'] 	= $this->getLogList($orderInfo['order_sn']);
				$orderInfo['pay_logs'] 	= $this->getPayLogList($orderInfo['order_sn']);
			}
			return $orderInfo;
		} else {
			return false;
		}
	}
	
	/**
	 * 查询 订单列表
	 * 
	 * @param int $status
	 * @param int $offset
	 * @param int $limit
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getList(array $searchParam, $offset = 0, $limit = 10) {
		$allOrder = $orderInfo = $orderDataAll = array();
		$sql = $where = $orderBy = $limits ='';
		$uid = (int)$this->getMerchantID();
		if($uid){
			// 判断是否条件搜索
			if($searchParam)
			{
				$starttime = empty($searchParam['starttime']) ? '' : $searchParam['starttime'];
				$endtime = empty($searchParam['endtime']) ? '' : $searchParam['endtime'];
				if (!empty($searchParam['status']))
					$where .= ' AND o.order_status_id='.(int)$searchParam['status'];

				if ($starttime || $endtime){
					if($starttime && $endtime){
						$where .= $starttime < $endtime ? ' AND o.create_time > '.strtotime($starttime).' AND o.create_time < '.strtotime($endtime.' 23:59:59') : ' AND o.create_time < '.strtotime($starttime.' 23:59:59').' AND o.create_time > '.strtotime($endtime);
					}elseif($starttime){
						$where .= ' AND o.create_time > '.strtotime($starttime);
					}else{
						$where .= ' AND o.create_time < '.strtotime($endtime.' 23:59:59');
					}
				}	

				if (!empty($searchParam['keyword']))
					$where .= " AND (o.order_sn like '%" .$searchParam['keyword'] ."%' OR oe.cons_name = '" .$searchParam['keyword']."' OR oe.cons_phone = '".$searchParam['keyword']."') ";
			}
			// 组装sql 语句
			$orderBy = " ORDER BY o.create_time DESC ";
			$limits = " limit {$offset},{$limit} ";
			$sql = "SELECT o.id,o.order_sn,o.order_status_id,o.parent_order_sn,o.create_time,o.order_money,o.freight_money,o.is_pay,o.pay_type,u.nickname,s.pre_status,s.user_title,s.merchant_title,oe.user_shoot,oe.addressee_shoot,oe.is_evaluate,oe.delivery_way, um.uid, um.store_name, um.store_address FROM orders o 
					lEFT JOIN status s ON o.order_status_id = s.id
					lEFT JOIN user u ON o.user_id = u.id
					lEFT JOIN orders_extend oe ON o.order_sn = oe.order_sn
					lEFT JOIN user_merchant um ON o.merchant_id = um.uid
					WHERE o.parent_order_sn <> 1 AND o.merchant_id = {$uid} AND o.merchant_delete = 0 {$where} {$orderBy} {$limits}";
			$orderInfo = $this->queryAll($sql);

			if($orderInfo)
			{
				foreach ($orderInfo as $key => $val)
				{
					$time = 0;
					$allOrder[$val['order_sn']] = $val;
					$allOrder[$val['order_sn']]['goods'] = $this->getGoodsList($val['order_sn']);
				}
				$orderDataAll['orderList'] 		= 	$allOrder;
			}
			$orderDataAll['orderStatus'] 	= 	$this->getStatusList(1);
		}
		return $orderDataAll;
	}

	/**
	 * 查询 订单所有状态管理列表
	 * @param string $type
	 * @param int $offset
	 * @param int $limit
	 *
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getStatusList($type = 0)
	{
		$statusList = array();
		if ($type) {
			//组装sql 语句
			$sql = "SELECT id,user_title from status WHERE type = {$type}";
			$statusList = $this->queryAll($sql);
		}
		return $statusList;
	}
	/**
	 *
	 * 统计 订单总数
	 * 
	 * @param string $keyword
	 * @return array
	 * @throws Exception
	 */
	public function getTotalNumber($searchParam = array()) {
		$sql = '';$where = '';
		// 判断是否条件搜索
		if($searchParam)
		{
			if (!empty($searchParam['status']))
				$where .= ' AND order_status_id='.(int)$searchParam['status'];
			
			if (!empty($searchParam['starttime']))
				$where .= ' AND create_time > '.strtotime($searchParam['starttime']);
			
			if (!empty($searchParam['endtime']))
				$where .= ' AND create_time < '.strtotime($searchParam['endtime']);
			
			if (!empty($searchParam['keyword']))
				$where .= " AND (id = " .(int)$searchParam['keyword'] ." OR order_sn like '%" .$searchParam['keyword'] ."%') ";	
		}
		$uid = (int)$this->getMerchantID();
		if($uid){
			// 组装sql 语句
			$sql = "SELECT count(*) FROM orders WHERE parent_order_sn <> 1 AND merchant_id = {$uid} AND merchant_delete = 0 {$where}";
			return (int)$this->queryScalar($sql);
		}
		return;
	}
	
	/**
	 * 查询 运单操作日志 列表
	 *
	 * @param string $order_sn
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getLogList($order_sn) {
		$logInfo = array();$sql = '';
		if($order_sn)
		{
			$url = 'http://www.eps.com/api/ebgApi/sendInfo';
			$data = array(
				'ebg_order_sn' => $order_sn,
				'apt' => 12366,
				'orderBy' => 'ASC',
				'accessToken' => md5('ebgApiData')
			);
			// 远程获取运单数据
			$resultData = GlobalOrders::send_http($url, $data);
			$logInfo = $this->jsonDnCode($resultData);
		}
		return $logInfo;
	}
	
	/**
	 * 查询 订单操作日志 列表
	 *
	 * @param string $order_sn
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getExpressList() {
		$expressInfo = array();$sql = '';
		$uid = (int)$this->getMerchantID();
		if($uid)
		{
			$sql = "SELECT id,firm_name FROM express WHERE usable = 1 ORDER BY rank asc";
			$expressInfo = $this->queryAll($sql);
		}
		return $expressInfo;
	}
	
	/**
	 * 查询 订单操作日志 列表
	 *
	 * @param string $order_sn
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getPayLogList($order_sn) {
		$payLogInfo = array();$sql = '';
		if($order_sn)
		{
			// 组装sql 语句
			$sql = "SELECT oal.id, oal.trade_no, oal.pay_money, oal.pay_time, oal.pay_verify, oal.pay_port FROM order_pay_log oal 
			WHERE oal.order_sn = '{$order_sn}' ORDER BY pay_time DESC";

			$payLogInfo = $this->queryAll($sql);
		}
		return $payLogInfo;
	}
	
	/**
	 * 查询 订单商品 列表
	 * @param string $order_sn
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getGoodsList($order_sn) {
		$logInfo = array();$sql = $where = '';
		if($order_sn)
		{
			$where = " WHERE order_sn = '{$order_sn}'";
			// 组装sql 语句
			$sql = "SELECT id, goods_cover, goods_type, goods_title, goods_attrs, goods_vers_num, num, unit_price, goods_id, return_sn, is_evaluate, is_reply_evaluate FROM order_goods {$where} ";

			$orderInfo = $this->queryAll($sql);
		}
		return $orderInfo;
	}
	
	/**
	 * 获得有评论的订单号 列表
	 * return array
	 * @param int $id
	 */
	public function getOrderList() {
		$info = array ();
		
		$sql = "SELECT o.* FROM orders o LEFT JOIN goods_comment c ON o.order_sn = c.order_sn WHERE c.id <> '' OR c.id is not null";
		$info = Yii::app ()->getDb ()->createCommand ( $sql )->queryRow ( true, array () );
		
		return $info;
	}
	
	/**
	 * 检查给定的密码是否正确
	 * @param		string		$writePassword		密码(明文字符串)
	 * @param		string		$dbPassword			数据库中存储加密后的密码值
	 * @return		boolean
	 */
	public function validatePassword($writePassword , $dbPassword)
	{
		return GlobalUser::validatePassword($writePassword, $dbPassword);
	}
	
	/**
	 * 操作后台订单管理 集合
	 *	return boolean
	 * @param int $id
	 */
	public function setOrderInfo($post) {
		$logData = $orderExtend = $orderData = $orderPayLogData = $orderInfo = $orderGoods = $orderComment = array ();
		$memo = $typename = $datastr = $logstr = $now_status_id = $pre_status_id = $payport = $tradeno = $goodsId = $system_memo = $smsLogs = $codeNums = '';
		$currentUser = $this->getUser();
		$merchant = ClassLoad::Only('User')->getMerchantInfo($this->getMerchantID());
		//整理提交来的数据集合
		foreach ($post as $key => $val)
		{
			switch ($key){
				case 'typename':			$typename 	=	$val;	break;
				case 'express_id':			$expressId 	=	$val;	break;
				case 'order_sn':			$order_sn 	=	$val;	break;
				case 'express_no':			$expressNo 	=	$val;	break;
				case 'reason':				$reason 	=	$val;	break;
				
				default:					$orderData[$key] = $val;break;
			}
		}
		//判断是否存在该订单
		if($order_sn)
		{
			$orderInfo = $this->getExpressName($order_sn);
			
		}
		//判断用户操作 类型
		switch ($typename)
		{
			case 'send_goods':
				$pre_status_id = 115;
				$now_status_id = 106;
				if($orderInfo['delivery_way'] == 2){
					$codeNums = $this->getRandChar(8);
					$phone = $this->getUserPhone($orderInfo['user_id']);
					$smsLogs = "尊敬的会员用户您好，您在e办公商城购买的商品，商家 [ ".$merchant['store_name']." ] 已经将商品送到指定网点，请凭兑取码【{$codeNums}】前往领取。谢谢！---e办公商城.";
					$this->sendPhoneSms($phone, $smsLogs);
				}
				$logstr = $orderInfo['delivery_way'] == 2 ? "商家 [ ".$merchant['store_name']." ] 已经将商品送到指定网点，请凭兑取码【{$codeNums}】前往领取。" : "商家 [ ".$merchant['store_name']." ] 通过商家管理后台进行了 [ 发货 ] 操作";
				break;
			case 'prepare_goods':
				$pre_status_id = 103;
				$now_status_id = 105;
				$logstr = "商家 [ ".$merchant['store_name']." ] 通过商家管理后台进行了 [ 开始备货 ] 操作, 该订单进入备货阶段";
				break;
			case 'finish_prepare':
				$pre_status_id = 105;
				$now_status_id = 115;
				$logstr = "商家 [ ".$merchant['store_name']." ] 通过商家管理后台进行了 [ 确认完成备货 ] 操作, 该订单进入待发货阶段";
				break;
// 			case 'refuse_reback':
// 				$pre_status_id = 106;
// 				$now_status_id = 107;
// 				$logstr = "商家 [ ".$currentUser['true_name']." ] 通过商家管理后台拒绝了用户的退货申请 并注明了拒绝原因,原订单状态已完成";
// 				break;
// 			case 'agree_reback':
// 				$pre_status_id = 106;
// 				$now_status_id = 107;
// 				$logstr = "商家 [ ".$currentUser['true_name']." ] 通过商家管理后台同意了用户的退货申请 并进入退款流程阶段,原订单状态已完成";
// 				break;
			case 'edit_money':
				$pre_status_id = 101;
				$now_status_id = 101;
				$logstr = "商家 [ ".$merchant['store_name']." ] 通过商家管理后台进行了 [ 修改订单金额 ] 操作,将原订单金额 [".$orderInfo['order_money']."]修改为 [".$orderData['order_money'].".00]元";
				break;
			case 'option_abolish_yes':
				$pre_status_id = 104;
				$now_status_id = 108;
				$logstr = "商家 [ ".$merchant['store_name']." ] 通过商家管理后台 [ 同意退款 ] 操作审核通过了 用户取消该订单申请，并进入财务退款阶段。";
				break;
			case 'option_abolish_no':
				$pre_status_id = 104;
				$now_status_id = 103;
				$logstr = "商家 [ ".$merchant['store_name']." ] 拒绝通过 用户取消该订单申请,并进入备货阶段. 拒绝原因：{$reason}";
				break;
			case 'received_goods':
				$pre_status_id = 106;
				$now_status_id = 107;
				$logstr = $orderInfo['pay_type'] == 2 ? "商家 [ ".$merchant['store_name']." ] 通过商家管理后台 确认用户收货并付款 " : "商家 [".$merchant['store_name']."] 通过商家管理后台确认用户收货, 该订单操作已完成！";
				break;
			case 'reply_content':
				$pre_status_id = 107;
				$now_status_id = 107;
				$logstr = "商家 [ ".$merchant['store_name']." ] 通过 [ 回复用户评价 ] 操作回复了用户商品评价";
				break;
				
			default:	break;
		}
		$logData = array(
			'order_sn' => $order_sn,
			'operate_type' => 2,
			'operate_id' => $this->getMerchantID(),
			'pre_order_status_id' => $pre_status_id,
			'now_order_status_id' => $now_status_id,
			'logs' => $logstr,
			'memo' => $memo,
			'time' => time(),
		);

		//开始事务操作
		$transaction = Yii::app()->getDb()->beginTransaction();
		try
		{
			$flag = $this->insert('order_log' , $logData);
			if($order_sn)
			{
				//判断是否为发货操作
				if($typename == 'send_goods')
				{
					$orderData['order_status_id'] = $now_status_id;
					if(!empty($expressId)){
						$orderExtend['express_id'] = $expressId;
						$orderExtend['express_no'] = $expressNo;
					}
					$orderExtend['express_send_time'] = time();

					$this->update ( 'orders_extend', $orderExtend, "order_sn='{$order_sn}'" );
					$this->update ( 'orders', $orderData, "order_sn='{$order_sn}'" );
					$this->createSendOrder($order_sn);
				}
				elseif($typename == 'reply_content')
				{
					$orderComment = array(
						'reply_content' => $orderData['reply_content'],
						'reply_time' => time()
					);
					$orderGoods['is_reply_evaluate'] = 1;
					$this->update ( 'order_comment', $orderComment, "order_sn='{$order_sn}' AND goods_id = {$goodsId} " );
					$this->update ( 'order_goods', $orderGoods, "order_sn='{$order_sn}' AND goods_id = {$goodsId} " );
				}//判断是否为修改订单价格  操作
				elseif($typename == 'edit_money')
				{
					$editMoney = $orderInfo['order_money']-$orderData['order_money'];
					$orderData['edit_money'] = $orderInfo['edit_money'] + $editMoney;
					$orderData['discount_money'] = $orderInfo['discount_money'] + $orderData['edit_money'];
					$this->update ( 'orders', $orderData, "order_sn='".$order_sn."'" );
					if($orderInfo['parent_order_sn'] && $orderInfo['parent_order_sn'] != 1){
						$parentOrder = $this->getActiveInfo($orderInfo['parent_order_sn'], 1);
						$orderParentData['edit_money'] = $parentOrder['edit_money'] + $editMoney;
						$orderParentData['order_money'] = $parentOrder['order_money'] - $editMoney;
						$this->update ( 'orders', $orderParentData, "order_sn='".$orderInfo['parent_order_sn']."'" );
					}
				}//判断是否为发货操作
				elseif($typename == 'back_goods')
				{
					$orderGoods['return_sn'] = $orderData['return_sn'];	
					$this->update ( 'order_goods', $orderGoods, "order_sn='{$order_sn}' AND goods_id = {$goodsId}" );
					$goodsArr = $this->queryRow("SELECT * FROM order_goods WHERE order_sn = '{$order_sn}' limit 1");
					//是否该订单已经全部商品退货完成，是则改变订单状态
					if(!$goodsArr['id'])
					{
						$this->update ( 'orders', array('is_back_goods'=>1), "order_sn='{$order_sn}'" );
					}
				}//确认用户已收到商品
				elseif($typename == 'prepare_goods' || $typename == 'finish_prepare' || $typename == 'received_goods' || $typename == 'option_abolish_yes' || $typename == 'option_abolish_no')
				{
					$orderData['order_status_id'] = $now_status_id;
					$this->update ( 'orders', $orderData, "order_sn='{$order_sn}'" );
				}
				//取消订单---恢复库存
				if($typename == 'option_abolish_yes')
				{
					GlobalOrders::setGoodsNum($order_sn);
				}
			}
			$transaction->commit();
			return $flag;
		}catch(Exception $e){
			$transaction->rollBack();
			return false;
		}
	}
	
	/**
	 * 订单 快递公司名称信息查询
	 * @param		array		$post		post
	 * @param		string		$order_sn	订单号
	 */
	public function getExpressName($order_sn)
	{
		$expressArr = array();$sql = '';
		if ($order_sn)
		{
			$sql = "SELECT s.user_title, oe.express_name, oe.system_remark,oe.delivery_way, o.order_money, o.edit_money, o.parent_order_sn, o.pay_type, o.is_pay, o.user_id, o.discount_money FROM orders o 
					LEFT JOIN orders_extend oe ON o.order_sn = oe.order_sn 
					LEFT JOIN status s ON o.cancel_status_id = s.id 
					WHERE o.order_sn = '{$order_sn}'";
			$expressArr = $this->queryRow($sql);
			return $expressArr;
		}
		return '';
	}

	/**
	 * 订单超时未支付系统自动取消订单操作
	 * @param		return		boolean
	 * @param		array		$post
	 */
	public function setAbolishInfo($post)
	{
		$abolishArr = array();$flag = 0;
		if ($post)
		{
			//开始事务操作
			$transaction = Yii::app()->getDb()->beginTransaction();
			try
			{
				$uid = $this->getMerchantID();
				if($post['option_ordersn'] && $uid)
				{
					$orderInfo = $this->getActiveInfo($post['option_ordersn'],1);
					//判断操作
					$abolishArr['cancel_status_id'] = isset($post['cancel_status_id']) ? $post['cancel_status_id'] : 0;
					$abolishArr['order_status_id'] = 102;
					$flag = $this->update ( 'orders', $abolishArr, "order_sn='".$post['option_ordersn']."' " );
	
					if($flag){
						$logData = array(
							'order_sn' => $post['option_ordersn'],
							'operate_type' => isset($post['system']) ? 3 : 1,
							'operate_id' => isset($post['system']) ? 1: $uid,
							'pre_order_status_id' => $orderInfo['order_status_id'],
							'now_order_status_id' => $abolishArr['order_status_id'],
							'logs' => isset($post['system']) ? "会员超过时限未支付，系统自动取消了此订单。" : ($orderInfo['is_pay'] ? "商家会员 [ ".$userInfo['nickname']." ] 通过商家中心平台申请取消该订单，进入等待商家审核退款阶段。" : "商家会员 [ ".$userInfo['nickname']." ] 通过商家中心平台取消了此订单。"),
							'memo' => '',
							'time' => time(),
						);
						$this->insert('order_log' , $logData);
						//回复商品库存
						GlobalOrders::setGoodsNum($post['option_ordersn']);
					}
				}
				$transaction->commit();
				return $flag;
			}catch(Exception $e){
				$transaction->rollBack();
				return false;
			}
		}
		return 0;
	}

	/**
	 * 商家删除订单操作
	 *	return boolean
	 * @param int $id
	 */
	public function deleteOrder($post) {
		$orderData = array ();
		$uid = (int)$this->getMerchantID();
		//判断是否存在该订单
		if($post['order_sn'])
		{
			//开始事务操作
			$transaction = Yii::app()->getDb()->beginTransaction();
			try
			{
				//修改订单删除状态
				$orderData['merchant_delete'] = 1;
				$flag = $this->update ( 'orders', $orderData, "order_sn='".$post['order_sn']."' AND user_id={$uid}" );
				$transaction->commit();
				return $flag;
			}catch(Exception $e){
				$transaction->rollBack();
				return false;
			}
		}
	}

	/**
	 * 获得 商品订单日志 时间
	 * @param string	$order_sn
	 * @param int 		$status
	 */
	public function getOrderLogTime($status, $order_sn = '') {
		$status = ( int ) $status;
		$orderInfo = array ();
		if ($status) {
			$sql = "SELECT time FROM order_log WHERE now_order_status_id = {$status} AND order_sn = '{$order_sn}' ORDER BY time desc limit 1";
			$orderInfo = $this->queryRow($sql);
			return isset($orderInfo['time']) ? date('Y-m-d H:i:s',$orderInfo['time']) : '';
		} else {
			return false;
		}
	}
	
	/**
	 * 获得 商品订单 评论列表
	 * @param string $order_sn
	 * @param int $status
	 * @param return array|boolean
	 */
	public function getOrderComment($goods_id,$order_sn = '') {
		$commentInfo = array ();
		$goodId = (int)$goods_id;
		if ($order_sn) {
			$sql = "SELECT oc.content, g.title FROM order_comment oc 
					LEFT JOIN goods g ON oc.goods_id = g.id 
					WHERE oc.order_sn = '{$order_sn}' AND oc.goods_id = {$goodId}";
			$commentInfo = $this->queryRow($sql);
			return $commentInfo;
		} else {
			return false;
		}
	}

	/**
	 * 查询 店铺首页所有数据
	 * @param int $uid
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getAllData($uid) {
		$allData = $orderInfo = $allGoodsData = $allOrderData = array();
		$noPay = $noSend = $returnGoods = $reimburse = $noEvaluate = 0;
		$uid = (int)$uid;
		if($uid){
			// 查询当前商家所有订单状态
			$sql = "SELECT o.id, o.order_status_id, o.is_pay, oe.is_evaluate FROM orders o 
					LEFT JOIN orders_extend oe ON o.order_sn = oe.order_sn 
					WHERE o.merchant_id = {$uid} AND o.parent_order_sn <>1 ";
			$orderInfo = $this->queryAll($sql);
			if($orderInfo)
			{
				foreach ($orderInfo as $key => $val)
				{
					$noPay 			+= 		$val['is_pay'] == 0 ? 1 : 0;
					$noSend 		+= 		$val['order_status_id'] == 103 ? 1 : 0;
					$noEvaluate 	+= 		$val['order_status_id'] == 107 && $val['is_evaluate'] == 0 ? 1 : 0;
					$reimburse 		+= 		$val['order_status_id'] == 104 ? 1 : 0;
					$returnGoods 	+= 		$val['order_status_id'] == 105 ? 1 : 0;
				}
				$allOrderData = array(
					'noPay' 		=>	$noPay,
					'noSend' 		=>	$noSend,
					'noEvaluate'	=>	$noEvaluate,
					'reimburse' 	=>	$reimburse,
					'returnGoods' 	=>	$returnGoods
				);
			}
			//查询商家所有商品及状态
			$allGoodsData = $this->getAllGoods($uid);
			$allData = array_merge($allOrderData, $allGoodsData);
		}
		return $allData;
	}

	/**
	 * 查询 查询商家所有商品
	 * @param int $uid
	 * @return array|static[]
	 * @throws Exception
	 */
	public function getAllGoods($uid) {
		$allData = $goodsList = array();
		$saleNums = $waitSalesNums = $waitAuditNums = 0;
		$uid = (int)$uid;
		if($uid){
			// 查询当前商家所有订单状态
			$sql = "SELECT id, shelf_id, status_id FROM goods WHERE merchant_id = {$uid}";
			$goodsList = $this->queryAll($sql);
			if($goodsList)
			{
				foreach ($goodsList as $key => $val)
				{
					$saleNums 		+= 	$val['shelf_id'] == 410 ? 1 : 0;
					$waitAuditNums 	+= 	$val['status_id'] == 400 ? 1 : 0;
					$waitSalesNums 	+= 	$val['status_id'] == 401 && $val['shelf_id'] == 0 ? 1 : 0;
				}
				$allData = array(
					'saleNums' 		=>	$saleNums,
					'waitAuditNums'	=>	$waitAuditNums,
					'waitSalesNums'	=>	$waitSalesNums,
				);
			}
		}
		return $allData;
	}
	
	/**
	 * 商家发货同步生成e配送订单
	 * @param string	$orderSn
	 * @throws Exception
	 */
	function createSendOrder($orderSn)
	{
		if($orderSn){
			$orderData = $this->getOrderInfo($order_sn);
			//远程获取运单数据
			$url = 'http://www.eps.com/api/ebgApi/index';
			$data = array(
				'ebg_order_sn' => $orderSn,
				'apt' => 12366,
				'post_name' => $orderData['realname'],
				'post_mobile' => $orderData['phone'],
				'post_address' => $orderData['store_address'],
				'post_number' => '',
				'receive_name' => $orderData['cons_name'],
				'receive_mobile' => $orderData['cons_phone'],
				'receive_address' => $orderData['cons_address'],
				'receive_number' => '',
				'goods_name' => '',
				'goods_weight' => '',
				'goods_num' => '',
				'amount' => $orderData['freight_money'],
				'pay_type' => $orderData['pay_type'],
				'accessToken' => md5('ebgApiData')
			);

			GlobalOrders::send_http($url, $data);
		}
		return false;
	}

	/**
	 * 获得 单个指定订单的指定信息
	 * return array|boolean
	 * @param int $order_sn
	 */
	public function getOrderInfo($order_sn) {
		$orderInfo = array ();
		if ($order_sn) {
			$sql = "SELECT o.freight_money, o.pay_type, oe.cons_name, oe.cons_phone, oe.cons_address, ex.id as ex_id, u.realname, u.phone, um.store_address FROM orders o
			lEFT JOIN orders_extend oe ON o.order_sn = oe.order_sn
			lEFT JOIN express ex ON oe.express_id = ex.id
			lEFT JOIN user u ON o.merchant_id = u.id
			lEFT JOIN user_merchant um ON o.merchant_id = um.uid
			WHERE o.order_sn = '{$order_sn}' ";
			$orderInfo = $this->queryRow($sql);

			return $orderInfo;
		} else {
			return false;
		}
	}

	/**
	 * 上面自提 商家发货后向用户发送短信
	 * @param int $length
	 * @return string|NULL
	 * @throws Exception
	 */
	function sendPhoneSms($phone, $content)
	{
		//PHP短信接口 --
		if ($returned = SmsNote::sendOne($phone , $content))
		{
			if (isset($returned['code']) && $returned['code'] == 0)
				return true;
		}
		return false;
	}
	/**
	 * 随机生成字符串
	 * @param int $length
	 * @return string|NULL
	 * @throws Exception
	 */
	function getRandChar($length){
		$str = null;
		$strPol = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz";
		$max = strlen($strPol)-1;

		for($i=0;$i<$length;$i++){
			$str.=$strPol[rand(0,$max)];
		}

		return $str;
	}

	//查询用户的手机号
	function getUserPhone($id){
		$userData = array();
		$model = ClassLoad::Only('User');/* @var $model User */
		$userData = $model->getPersonInfo($id);
		
		return !empty($userData) ? $userData['phone'] : '';
	}
	
}
